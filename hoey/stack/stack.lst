     1                                  ; stack.asm
     2                                  extern printf
     3                                  section .data
     4 00000000 414243444500                strng       db      "ABCDE", 0
     5                                      strngLen    equ     $-strng-1                           ; string length without 0
     6 00000006 546865206F72696769-         fmt1        db      "The original string: %s", 10, 0
     6 0000000F 6E616C20737472696E-
     6 00000018 673A2025730A00     
     7 0000001F 546865207265766572-         fmt2        db      "The reversed string: %s", 10, 0
     7 00000028 73656420737472696E-
     7 00000031 673A2025730A00     
     8                                  
     9                                  section .bss
    10                                  section .text
    11                                      global main
    12                                  
    13                                  main:
    14 00000000 55                          push    rbp
    15 00000001 4889E5                      mov     rbp, rsp
    16                                  
    17                                      ; print the original string
    18 00000004 48BF-                       mov     rdi, fmt1
    18 00000006 [0600000000000000] 
    19 0000000E 48BE-                       mov     rsi, strng
    19 00000010 [0000000000000000] 
    20 00000018 B800000000                  mov     rax, 0
    21 0000001D E8(00000000)                call printf
    22                                  
    23                                      ; put the string char per char on the stack
    24 00000022 4831C0                      xor     rax, rax
    25 00000025 48BB-                       mov     rbx, strng                  ; address of strng in rbx
    25 00000027 [0000000000000000] 
    26 0000002F B905000000                  mov     rcx, strngLen               ; length in rcx counter
    27 00000034 41BC00000000                mov     r12, 0                      ; use r12 as pointer
    28                                      pushLoop:
    29 0000003A 428A0423                        mov     al, byte [rbx+r12]      ; move char into rax
    30 0000003E 50                              push    rax                     ; push rax on the stack
    31 0000003F 49FFC4                          inc     r12                     ; increase char pointer with 1
    32 00000042 E2F6                            loop    pushLoop                ; continue loop
    33                                  
    34                                      ; pop the string char per char from the stack
    35                                      ; this will reverse the original string
    36 00000044 48BB-                       mov     rbx, strng                  ; address of strng in rbx
    36 00000046 [0000000000000000] 
    37 0000004E B905000000                  mov     rcx, strngLen               ; length in rcx counter
    38 00000053 41BC00000000                mov     r12, 0                      ; use r12 as pointer
    39                                      popLoop:
    40 00000059 58                              pop     rax                     ; pop a char from the stack
    41 0000005A 42880423                        mov     byte [rbx+r12], al      ; move the char into strng
    42 0000005E 49FFC4                          inc     r12                     ; increase char pointer with 1
    43 00000061 E2F6                            loop    popLoop                 ; continue loop
    44 00000063 42C6042300                      mov     byte [rbx+r12], 0       ; terminate string with 0
    45                                  
    46                                      ; print the reversed string
    47 00000068 48BF-                       mov     rdi, fmt2
    47 0000006A [1F00000000000000] 
    48 00000072 48BE-                       mov     rsi, strng
    48 00000074 [0000000000000000] 
    49 0000007C B800000000                  mov     rax, 0
    50 00000081 E8(00000000)                call printf
    51                                  
    52 00000086 4889EC                      mov     rsp, rbp
    53 00000089 5D                          pop     rbp
    54                                  
    55 0000008A C3                          ret
